#!/usr/bin/env coffee
fs = require 'fs'
util = require 'util'
path = require 'path'
spawn = require("child_process").spawn
node_modules = path.join(path.dirname(fs.realpathSync(__filename)),"../node_modules/")
optimist = require (node_modules + 'optimist')
Log = require (node_modules + 'coloured-log')
log = new Log()

optimist.usage("\nTimbits Code Generation\n\n" +
"timbits n[ew] [project]\n\tCreates new subfolders [project], [project]/timbits, and [project]/views.\n\tGenerates basic server.js, package.json, History.md, README.md, and LICENSE files.\n\n" +
"timbits g[enerate] [timbit]\n\tScaffolds a new timbit at timbits/[timbit].coffee and a new view at views/[timbit]/default.coffee\n\n" +
"timbits s[erver]\n\tLaunches runjs with server.js\n\n" +
"timbits [-]v[ersion]\n\tDisplays installed timbits library version")

lib = path.dirname(fs.realpathSync(__filename)) + '/template'

mkdir = (directory, callback) ->
	# Make directory
	fs.mkdir directory, (e) ->
		if e?.message?
			log.error "#{e.message}"
		else
			log.info "Created #{directory} directory"
		callback()

cp = (file, destination, callback) ->
	# Copy file
	templateFile = fs.createReadStream file
	newFile = fs.createWriteStream destination
	newFile.once 'open', =>
		util.pump templateFile, newFile, callback

newProject = (argv) ->
	# Creates new subfolders [project], [project]/timbits, and [project]/views.
	# Generates basic server.js, package.json, History.md, README.md, and LICENSE files.
	if argv.length < 2
		log.error "New project requires two parameters (eg. './timbits new project')"
	else
		log.notice "Creating project '#{argv[1]}'"
		directories = ["#{argv[1]}", "#{argv[1]}/timbits", "#{argv[1]}/helpers", "#{argv[1]}/views", "#{argv[1]}/test"]
		files = ["server.js", "History.md", "README.md", "LICENSE"]

		mkdir directories[0], ->
			mkdir directories[1], ->
			mkdir directories[2], ->
			mkdir directories[3], ->
			mkdir directories[4], ->
				cp "#{lib}/test/timbits-test.coffee", "#{argv[1]}/test/#{argv[1]}-test.coffee", ->

			for file in files
				cp "#{lib}/#{file}", "#{argv[1]}/#{file}", ->

			getVersion (pkg) ->
				package_json = "{\n\t\"name\": \"#{argv[1]}\",\n\t\"description\": \"Widgets built using Timbits\",\n\t\"version\": \"0.0.1\",\n\t\"dependencies\": {\n\t\t\"timbits\": \">= #{pkg.version}\"\n\t}\n}"
				fs.writeFile "#{directories[0]}/package.json", package_json, (err) ->
					throw err if err
					log.info "Created package.json in #{directories[0]}/package.json"
					log.notice "Run 'npm init' to update your package.json file"
					log.notice "Don't forget to run 'npm install -d' to install required packages"

generateTimbit = (argv) ->
	# Scaffolds a new timbit at timbits/[timbit].coffee and a new view at views/[timbit]/default.coffee
	if argv.length < 2
		log.error "Generating timbit requires two parameters (eg. './timbits generate timbit')"
	else
		log.notice "Generating timbit '#{argv[1]}'"
		fs.readdir "timbits", (e) ->
			if e?.message?
				log.error "#{e.message}: timbits"
			else
				cp "#{lib}/timbit.coffee", "timbits/#{argv[1]}.coffee", ->
		fs.readdir "views", (e) ->
			if e?.message?
				log.error "#{e.message}: views"
			else
				mkdir "views/#{argv[1]}", ->
					fs.writeFile "views/#{argv[1]}/default.coffee", "h1 '#{argv[1]} Timbit'", (err) ->
						throw err if err
						log.info "Created view in views/#{argv[1]}/default.coffee"

startServer = (argv) ->
	# Launches runjs with server.js
	log.notice "Running command 'runjs server.js'"
	runjs = spawn("runjs", [ "server.js" ])
	runjs.stdout.on "data", (data) ->
		console.log data.toString()
	runjs.stderr.on "data", (data) ->
		console.log data.toString()

getVersion = (callback) ->
	# Get version of installed timbits library
	fs.readFile path.join(path.dirname(fs.realpathSync(__filename)),"../package.json"), (err, data) ->
		throw err if err
		pkg = JSON.parse(data)
		callback pkg

showVersion = (argv) ->
	# Show version of installed timbits library
	getVersion (pkg) ->
		console.log pkg.version

showHelp = (argv) ->
	# Show usage help
	console.log optimist.help()

switch optimist.argv._[0]
	when 'n', 'new' then newProject(optimist.argv._)
	when 'g', 'generate' then generateTimbit(optimist.argv._)
	when 's', 'server' then startServer()
	when 'v', 'version' then showVersion()
	else
		if optimist.argv.v? # Also support -v for unix convention consistency
			showVersion()
		else
			showHelp()
