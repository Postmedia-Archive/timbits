#!/usr/bin/env node

// load modules
var fs = require('fs')
  , util = require('util')
  , path = require('path')
  , spawn = require("child_process").spawn
  , optimist = require(path.join(__dirname, '..', 'node_modules', 'optimist'))
  , which = require(path.join(__dirname, '..', 'node_modules', 'which')).sync;

// configure optimist
optimist.usage(
"Timbits Command Help\n\n \
timbits n[ew] [project]\n\ \
  Creates new project template and subfolders\n\n \
timbits g[enerate] [timbit]\n \
  Scaffolds a new timbit and default view\n\n \
timbits s[erver] [filename]\n \
  Launches runjs with [server.js]\n\n \
timbits t[est] [options]\n \
  Run mocha test cases\n\n \
timbits [-]v[ersion]\n \
  Displays installed timbits library version \
");

optimist.alias('a', 'all').describe('a', 'run all dynamic tests');
optimist.alias('w', 'watch').describe('w', 'watch for changes and retest');

// determine path to our project template files
var template = path.join(__dirname, 'template');

// determine path to a command in local node modules
function localCmd(name) {
  var cmd = path.join(__dirname, '..', 'node_modules', '.bin', name);
  return which(cmd);
}

function cp(source, destination) {
  var data = fs.readFileSync(source);
  fs.writeFileSync(destination, data);
}

function loadEnv() {
  if (fs.existsSync('.env')) {
    var env_lines = fs.readFileSync('.env').toString().split('\n');
    for (var i = 0; i < env_lines.length; i++) {
      var key_value = env_lines[i].split('=');
      if (key_value.length === 2) {
        console.log('Setting env var: ' + env_lines[i]);
        process.env[key_value[0]] = key_value[1];
      }
    }
  }
}

function newProject(name) {
  console.log("Creating project '" + name + "'");
  
  var directories = ["timbits", "helpers", "views", "test"];
  var files = ["server.js", "History.md", "README.md", "LICENSE"];
  
  var project_home = path.join(process.cwd(), name);
  
  if(fs.existsSync(project_home)) {
    console.log('ERROR! ' + project_home + ' already exists!');
    return;
  }
  
  // create parent directory
  console.log('Creating project directory: ' + project_home);
  fs.mkdirSync(project_home);
  
  // create child directories
  for (var i = 0; i < directories.length; i++) {
    console.log('Creating child directory: ' + directories[i]);
    fs.mkdirSync(path.join(project_home, directories[i]));
  }
  
  // copy template files
  for (var i = 0; i < files.length; i++) {
    console.log('Copying template file: ' + files[i]);
    cp(
      path.join(template, files[i]),
      path.join(project_home, files[i])
    );
  }
  
  // copy test template
  console.log('Generating test template: ' + name + '-test.coffee');
  cp(
    path.join(template, 'test', 'timbits-test.coffee'),
    path.join(project_home, 'test', name + '-test.coffee')
  );
  
  // create package file
  console.log('Generating package.json: package.json');
  var pkg = {
    name: name,
    description: 'Widgets built using Timbits',
    version: '0.0.1',
    dependencies: {
      timbits: getPackage().version
    }
  };
  
  fs.writeFileSync(
    path.join(project_home, 'package.json'),
    JSON.stringify(pkg)
  );
   
  // prompt user to configure npm package
  var npm_init = spawn(
    which('npm'),
    ['init'],
    {
      cwd: project_home,
      env: process.env,
      stdio: 'inherit'
    }
  );
  
  npm_init.on('exit', function(code) {
    if(code === 0) {
      // install dependencies
      spawn(
        which('npm'),
        ['install', '-d'],
        {
          cwd: project_home,
          env: process.env,
          stdio: 'inherit'
        }
      );
    }
    
    console.log('Finished!');
  });
  
}

function generateTimbit(name) {
  console.log("Generating timbit '" + name + "'");
  if(
    fs.existsSync(path.join('timbits', name + '.coffee')) ||
    fs.existsSync(path.join('views', name))
  ) {
    console.log('ERROR!  The timbit ' + name + ' may already exist!');
    return;
  }
  
  // create timbit
  console.log('Creating timbits/' + name + '.coffee');
  cp(
    path.join(template, 'timbit.coffee'),
    path.join('timbits', name + '.coffee')
  );
  
  // create default view
  console.log('Creating views/' + name + '/default.coffee');
  fs.mkdirSync(
    path.join('views', name)
  );
  
  fs.writeFileSync(
    path.join('views', name, 'default.coffee'),
    "h1 '" + name + " Timbit'"
  );
  
}



function startServer(filename) {
  console.log("Starting server (" + filename + ")");
  loadEnv();

  spawn(localCmd('runjs'), [filename], {
    stdio: 'inherit',
    env: process.env
  });
}

function runTests(alltests, watch) {
  if (alltests) {
    process.env.TIMBITS_TEST_WHICH = 'all';
  }
  loadEnv();
  
  var args = ['--reporter', 'spec', '--compilers', 'coffee:coffee-script', '--growl', '--colors'];
  if (watch) {
    args.push('--watch');
  }

  var mocha = spawn(localCmd('mocha'), args, {
    stdio: 'inherit',
    env: process.env
  });
}

function getPackage() {
  var data = fs.readFileSync(path.join(__dirname, '..', 'package.json'));
  return JSON.parse(data);
}

function showVersion() {
  var pkg = getPackage();
  console.log(pkg.version);
}

function showHelp() {
  console.log(optimist.help());
}

switch (optimist.argv._[0]) {
  case 'n':
  case 'new':
    if (optimist.argv._.length < 2) {
      log.error('new project requires a name');
      showHelp();
    } else {
      newProject(optimist.argv._[1]);
    }
    break;
    
  case 'g':
  case 'generate':
    if (optimist.argv._.length < 2) {
      log.error('new timbit requires a name');
      showHelp();
    } else {
      generateTimbit(optimist.argv._[1]);
    }
    break;
    
  case 's':
  case 'server':
    filename = optimist.argv._.length > 1 ? optimist.argv._[1] : 'server.js';
    startServer(filename);
    break;
    
  case 't':
  case 'test':
    runTests(optimist.argv.a, optimist.argv.w);
    break;
    
  case 'v':
  case 'version':
    showVersion();
    break;
    
  default:
    if (optimist.argv.v != null) {
      showVersion();
    } else {
      showHelp();
    }
}