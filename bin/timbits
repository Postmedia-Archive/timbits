#!/usr/bin/env coffee
fs = require 'fs'
util = require 'util'
path = require 'path'
{spawn} = require "child_process"
optimist = require 'optimist'
Log = require 'coloured-log'
log = new Log()
which = require('which').sync
readline = require 'readline'

optimist.usage("\nTimbits Code Generation\n\n" +
"timbits n[ew] [project]\n\tCreates new subfolders [project], [project]/timbits, and [project]/views.\n\tGenerates basic server.js, package.json, History.md, README.md, and LICENSE files.\n\n" +
"timbits g[enerate] [timbit]\n\tScaffolds a new timbit at timbits/[timbit].coffee and a new view at views/[timbit]/default.coffee\n\n" +
"timbits s[erver]\n\tLaunches runjs with server.js\n\n" +
"timbits t[est] [options]\n\tRun mocha test cases\n\n" + 
"timbits [-]v[ersion]\n\tDisplays installed timbits library version"
)

optimist.alias('a', 'all').describe('a', 'run all dynamic tests')
optimist.alias('w', 'watch').describe('w', 'watch for changes and retest')
optimist.alias('o', 'override').describe('o', 'override test engine options')

lib = path.dirname(fs.realpathSync(__filename)) + '/template'

mkdir = (directory, callback) ->
	# Make directory
	fs.mkdir directory, (e) ->
		if e?.message?
			log.error "#{e.message}"
		else
			log.info "Created #{directory} directory"
		callback()

cp = (file, destination, callback) ->
	# Copy file
	templateFile = fs.createReadStream file
	newFile = fs.createWriteStream destination
	newFile.once 'open', =>
		util.pump templateFile, newFile, callback

# helper function to load environment parameters from .env file
loadEnv = ->
	if fs.existsSync '.env'
		for env in fs.readFileSync('.env').toString().split('\n')
			key_value = env.split('=')
			if key_value.length is 2
				process.env[key_value[0]] = key_value[1]

newProject = (name) ->
	# Creates new subfolders [project], [project]/timbits, and [project]/views.
	# Generates basic server.js, package.json, History.md, README.md, and LICENSE files.
	log.notice "Creating project '#{name}'"
	directories = ["#{name}", "#{name}/timbits", "#{name}/helpers", "#{name}/views", "#{name}/test"]
	files = ["server.js", "History.md", "README.md", "LICENSE"]

	mkdir directories[0], ->
		mkdir directories[1], ->
		mkdir directories[2], ->
		mkdir directories[3], ->
		mkdir directories[4], ->
			cp "#{lib}/test/timbits-test.coffee", "#{name}/test/#{name}-test.coffee", ->

		for file in files
			cp "#{lib}/#{file}", "#{name}/#{file}", ->

		getVersion (pkg) ->
			package_json = "{\n\t\"name\": \"#{name}\",\n\t\"description\": \"Widgets built using Timbits\",\n\t\"version\": \"0.0.1\",\n\t\"dependencies\": {\n\t\t\"timbits\": \">= #{pkg.version}\"\n\t}\n}"
			fs.writeFile "#{directories[0]}/package.json", package_json, (err) ->
				throw err if err
				log.info "Created package.json in #{directories[0]}/package.json"
				log.notice "Run 'npm init' to update your package.json file"
				log.notice "Don't forget to run 'npm install -d' to install required packages"

generateTimbit = (name) ->
	# Scaffolds a new timbit at timbits/[timbit].coffee and a new view at views/[timbit]/default.coffee
	log.notice "Generating timbit '#{name}'"
	fs.readdir "timbits", (e) ->
		if e?.message?
			log.error "#{e.message}: timbits"
		else
			log.debug "#{lib}/timbit.coffee"
			cp "#{lib}/timbit.coffee", "timbits/#{name}.coffee", ->
	fs.readdir "views", (e) ->
		if e?.message?
			log.error "#{e.message}: views"
		else
			mkdir "views/#{name}", ->
				fs.writeFile "views/#{name}/default.coffee", "h1 '#{name} Timbit'", (err) ->
					throw err if err
					log.info "Created view in views/#{name}/default.coffee"

startServer = (filename) ->
	# Launches runjs with server.js or alternate
	loadEnv()
	log.notice "Starting server (#{filename})"
	cmd = which('runjs')
	runjs = spawn(cmd, [ filename ], {stdio: 'inherit', env: process.env})

runTests = (alltests, watch, override) ->
	process.env.TIMBITS_TEST_WHICH = 'all' if alltests
	loadEnv()
	args = []
	defaultArgs = "--reporter spec --compilers coffee:coffee-script --growl --colors"
	
	if override
		ask = readline.createInterface(process.stdin, process.stdout, null)
		log.notice "Override of test enging options"
		console.log "\u001b[33mPlease refer to the mocha documentation for available options, default options provided below. \u001b[0m\n"
		ask.question "Please enter test options:", (answer) ->
			log.notice "Running test engine with: #{answer}"
			ask.close()
			process.stdin.destroy
			args = answer.split(' ')
			runMocha args, watch
		ask.write "--reporter spec --compilers coffee:coffee-script --growl --colors"
	else
		args = defaultArgs.split(' ')
		runMocha args, watch

runMocha = (args, watch) ->
	args.push '--watch' if watch

	cmd = which('mocha')
	mocha = spawn cmd, args, {
			stdio: 'inherit'
			env: process.env
		}

getVersion = (callback) ->
	# Get version of installed timbits library
	fs.readFile path.join(path.dirname(fs.realpathSync(__filename)),"../package.json"), (err, data) ->
		throw err if err
		pkg = JSON.parse(data)
		callback pkg

showVersion = () ->
	# Show version of installed timbits library
	getVersion (pkg) ->
		console.log pkg.version

showHelp = ->
	# Show usage help
	console.log optimist.help()

switch optimist.argv._[0]
	when 'n', 'new'
		if optimist.argv._.length < 2
			log.error 'new project requires a name'
			showHelp()
		else
			newProject(optimist.argv._[1])
			
	when 'g', 'generate'
		if optimist.argv._.length < 2
			log.error 'new timbit requires a name'
			showHelp()
		else
			 generateTimbit(optimist.argv._[1])
			
	when 's', 'server'
		filename = if optimist.argv._.length > 1 then optimist.argv._[1] else 'server.js'
		startServer(filename)
		
	when 't', 'test'
		runTests(optimist.argv.a, optimist.argv.w, optimist.argv.o)
		
	when 'v', 'version'
		showVersion()
	else
		if optimist.argv.v? # Also support -v for unix convention consistency
			showVersion()
		else
			showHelp()
