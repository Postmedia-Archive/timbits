// Generated by CoffeeScript 1.3.3
(function() {

  exports.help = function() {
    style('body {\n	background: #d2d5dc; /* Old browsers */\n	background: -moz-linear-gradient(top, #d2d5dc 0%, #ffffff 75%); /* FF3.6+ */\n	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#d2d5dc), color-stop(75%,#ffffff)); /* Chrome,Safari4+ */\n	background: -webkit-linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* Chrome10+,Safari5.1+ */\n	background: -o-linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* Opera11.10+ */\n	background: -ms-linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* IE10+ */\n	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=\'#d2d5dc\', endColorstr=\'#ffffff\',GradientType=0 ); /* IE6-9 */\n	background: linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* W3C */\n	background-repeat: no-repeat;\n	margin: 0;\n	padding: 0;\n	font: 14px Tahoma, Geneva, sans-serif;\n}\n#content {\n    background: #fff none;\n    width: 750px;\n    padding: 5px 20px 20px 20px;\n	box-shadow: 0 0px 20px #666;\n	min-height: 500px;\n}\n\na {color: #4E5989; text-decoration: underline;}\na:hover {text-decoration: none;}\n\n#wrapper {width: 750px; margin: 0 auto;}\n\nh1 {border-bottom: 1px solid #999; width: 100%; font: 30px Tahoma, Geneva, sans-serif}\n\np, h3 {margin: 0 0 5px 0;}\nh2 {margin: 40px 0 5px 0;}\n\nul {\n    margin: 0 0 10px 0;\n    list-style: none;\n	padding: 0;\n}\n\nli {padding: 0 0 10px 0;}');
    return div({
      id: 'wrapper'
    }, function() {
      return div({
        id: 'content'
      }, function() {
        h1('Timbits - Help');
        return ul(function() {
          var k, v, _ref, _results;
          _ref = this.box;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(li(function() {
              return a({
                href: "../" + k + "/help"
              }, function() {
                return k + ' &raquo;';
              });
            }));
          }
          return _results;
        });
      });
    });
  };

  exports.test = function() {
    style('body {margin: 0; padding: 0; font-family: Tahoma, Geneva, sans-serif;}\n.test_block {\n	border: 1px solid #666;\n	margin: 20px;\n	padding: 20px;\n	width: 95%;\n	background-color: #fcfcfc;\n}\n.test_block:hover {background-color: #f6f6f6;}\nh1, h2, h3, h4, h5 {margin: 0; padding: 0;}\nh1 {margin: 0 0 20px 0;}\n\n.icon {\n	float: left;\n	margin: 3px 5px 0 0;\n}\n\ntable {width: 990px; font-size: 12px;}\nthead tr td {border-bottom: 1px solid #ddd; font-weight: bold;}\n.test_passed, .test_failed {margin: 30px 0;}\n.test_passed h3 {color: #009904; margin-bottom: 5px;}\n.test_failed h3 {color: #D23D24; margin-bottom: 5px;}\nul {margin:0; list-style: none; font-size: 12px; padding: 0 0 0 20px;}\nli:before { content: "Â» ";}\n.test_required_params, .test_optional_params {margin-top: 30px;}\nh4 {margin-bottom: 5px; color: #001cc9;}\n');
    return div({
      "class": "test_block"
    }, function() {
      var failed, passed, test, _i, _len, _ref;
      h1({
        "class": 'test_title'
      }, function() {
        return "Testing Summary, All Timbits";
      });
      passed = 0;
      failed = 0;
      _ref = this.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        test = _ref[_i];
        if (test.status !== 200) {
          failed++;
        } else {
          passed++;
        }
      }
      if (failed > 0) {
        div({
          "class": 'test_failed'
        }, function() {
          img({
            src: '/images/cancel.png',
            "class": 'icon'
          });
          h3("Failed " + failed + " of " + (passed + failed));
          return table(function() {
            thead(function() {
              return tr(function() {
                td('Timbit');
                td('URL');
                td('HTTP Status');
                return td('Error Message');
              });
            });
            return tbody(function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.results;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                test = _ref1[_j];
                if (test.status !== 200) {
                  _results.push(tr(function() {
                    td(test.timbit);
                    td(function() {
                      return a({
                        href: test.href,
                        target: '_blank'
                      }, function() {
                        return test.href;
                      });
                    });
                    td(test.status);
                    return td(test.error);
                  }));
                }
              }
              return _results;
            });
          });
        });
      }
      if (passed > 0) {
        return div({
          "class": 'test_passed'
        }, function() {
          img({
            src: '/images/accept.png',
            "class": 'icon'
          });
          h3("Passed " + passed + " of " + (passed + failed));
          return table(function() {
            thead(function() {
              return tr(function() {
                td('Timbit');
                return td('URL');
              });
            });
            return tbody(function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.results;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                test = _ref1[_j];
                if (test.status === 200) {
                  _results.push(tr(function() {
                    td(test.timbit);
                    return td(function() {
                      return a({
                        href: test.href,
                        target: '_blank'
                      }, function() {
                        return test.href;
                      });
                    });
                  }));
                }
              }
              return _results;
            });
          });
        });
      }
    });
  };

  exports.timbit_help = function() {
    style('body {\n	background: #d2d5dc; /* Old browsers */\n	background: -moz-linear-gradient(top, #d2d5dc 0%, #ffffff 75%); /* FF3.6+ */\n	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#d2d5dc), color-stop(75%,#ffffff)); /* Chrome,Safari4+ */\n	background: -webkit-linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* Chrome10+,Safari5.1+ */\n	background: -o-linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* Opera11.10+ */\n	background: -ms-linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* IE10+ */\n	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=\'#d2d5dc\', endColorstr=\'#ffffff\',GradientType=0 ); /* IE6-9 */\n	background: linear-gradient(top, #d2d5dc 0%,#ffffff 75%); /* W3C */\n	background-repeat: no-repeat;\n	margin: 0;\n	padding: 0;\n	font: 14px Tahoma, Geneva, sans-serif;\n}\n#content {\n    background: #fff none;\n    width: 750px;\n    padding: 5px 20px 20px 20px;\n	box-shadow: 0 0px 20px #666;\n	min-height: 500px;\n}\n\na {color: #4E5989; text-decoration: underline;}\na:hover {text-decoration: none;}\n\n#wrapper {width: 750px; margin: 0 auto;}\n\nh1 {border-bottom: 1px solid #999; width: 100%; font: 30px Tahoma, Geneva, sans-serif}\nh2 {font: 20px Tahoma, Geneva, sans-serif}\n\np, h3 {margin: 0 0 5px 0;}\nh2 {margin: 40px 0 5px 0;}\n\nul {\n    margin: 0 0 10px 0;\n    list-style: none;\n	padding: 0;\n}\n\nli {padding: 0 0 10px 0;}\n#return {margin-top: 20px;}\ntable {border: 1px solid #4E5989; width: 100%; border-collapse: collapse; border-spacing: 0;}\nth, tr {text-align: left; border-bottom: 1px solid #4E5989;}\ntd, th {border-right: 1px solid #4E5989;}\ntd, th {padding: 5px;}');
    return div({
      id: 'wrapper'
    }, function() {
      return div({
        id: 'content'
      }, function() {
        h1(this.name);
        p(this.about || 'Developer was too lazy to describe this widget');
        h2('Examples:');
        if (this.examples) {
          ul(function() {
            var example, _i, _len, _ref, _results;
            _ref = this.examples;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              example = _ref[_i];
              _results.push(li(function() {
                return a({
                  href: example.href
                }, function() {
                  return example.caption;
                });
              }));
            }
            return _results;
          });
        } else {
          p('Developer was too lazy to define any examples.');
        }
        h2('Views');
        if (this.views) {
          ul(function() {
            var view, _i, _len, _ref, _results;
            _ref = this.views;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              view = _ref[_i];
              _results.push(li(function() {
                return view;
              }));
            }
            return _results;
          });
        }
        h2('Parameters');
        if (this.params) {
          table(function() {
            return tbody(function() {
              var attr, key, _ref, _results;
              tr(function() {
                th('Name');
                th('Alias');
                th('Description');
                th('Type');
                th('Required');
                th('Multiple');
                th('Default');
                return th('Values');
              });
              _ref = this.params;
              _results = [];
              for (key in _ref) {
                attr = _ref[key];
                _results.push(tr(function() {
                  td(key);
                  td(attr.alias);
                  td(attr.description);
                  td(attr.type || 'String');
                  td((attr.required || false).toString());
                  td((attr.multiple || false).toString());
                  td(attr["default"]);
                  if (attr.values) {
                    return td(function() {
                      if (attr.strict) {
                        text('One of:');
                      } else {
                        text('Examples:');
                      }
                      return ul(function() {
                        var value, _i, _len, _ref1, _results1;
                        _ref1 = attr.values;
                        _results1 = [];
                        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                          value = _ref1[_i];
                          _results1.push(li(value));
                        }
                        return _results1;
                      });
                    });
                  }
                }));
              }
              return _results;
            });
          });
        } else {
          p('None defined');
        }
        return div({
          id: 'return'
        }, function() {
          return a({
            href: '/timbits/help'
          }, function() {
            return '&laquo; Help Index';
          });
        });
      });
    });
  };

  exports.timbit_test = function() {
    style('body {margin: 0; padding: 0; font-family: Tahoma, Geneva, sans-serif;}\n.test_block {\n	border: 1px solid #666;\n	margin: 20px;\n	padding: 20px;\n	width: 95%;\n	background-color: #fcfcfc;\n}\n.test_block:hover {background-color: #f6f6f6;}\nh1, h2, h3, h4, h5 {margin: 0; padding: 0;}\nh1 {margin: 0 0 20px 0;}\n\n.icon {\n	float: left;\n	margin: 3px 5px 0 0;\n}\n\ntable {width: 990px; font-size: 12px;}\nthead tr td {border-bottom: 1px solid #ddd; font-weight: bold;}\n.test_passed, .test_failed {margin: 30px 0;}\n.test_passed h3 {color: #009904; margin-bottom: 5px;}\n.test_failed h3 {color: #D23D24; margin-bottom: 5px;}\nul {margin:0; list-style: none; font-size: 12px; padding: 0 0 0 20px;}\nli:before { content: "Â» ";}\n.test_required_params, .test_optional_params {margin-top: 30px;}\nh4 {margin-bottom: 5px; color: #001cc9;}\n');
    return div({
      "class": "test_block"
    }, function() {
      var failed, passed, test, _i, _len, _ref;
      h1({
        "class": 'test_title'
      }, function() {
        return "Testing Summary, Timbit: '" + this.name + "'";
      });
      passed = 0;
      failed = 0;
      _ref = this.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        test = _ref[_i];
        if (test.status !== 200) {
          failed++;
        } else {
          passed++;
        }
      }
      if (failed > 0) {
        div({
          "class": 'test_failed'
        }, function() {
          img({
            src: '/images/cancel.png',
            "class": 'icon'
          });
          h3("Failed " + failed + " of " + (passed + failed));
          return table(function() {
            thead(function() {
              return tr(function() {
                td('URL');
                td('HTTP Status');
                return td('Error Message');
              });
            });
            return tbody(function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.results;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                test = _ref1[_j];
                if (test.status !== 200) {
                  _results.push(tr(function() {
                    td(function() {
                      return a({
                        href: test.href,
                        target: '_blank'
                      }, function() {
                        return test.href;
                      });
                    });
                    td(test.status);
                    return td(test.error);
                  }));
                }
              }
              return _results;
            });
          });
        });
      }
      if (passed > 0) {
        return div({
          "class": 'test_passed'
        }, function() {
          img({
            src: '/images/accept.png',
            "class": 'icon'
          });
          h3("Passed " + passed + " of " + (passed + failed));
          return table(function() {
            thead(function() {
              return tr(function() {
                return td('URL');
              });
            });
            return tbody(function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.results;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                test = _ref1[_j];
                if (test.status === 200) {
                  _results.push(tr(function() {
                    return td(function() {
                      return a({
                        href: test.href,
                        target: '_blank'
                      }, function() {
                        return test.href;
                      });
                    });
                  }));
                }
              }
              return _results;
            });
          });
        });
      }
    });
  };

}).call(this);
